# –§–∞–π–ª: analysis_utils.py

import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import pandas as pd

class ResultAnalyzer:
    def __init__(self, tester):
        self.tester = tester
    
    def plot_confusion_matrix(self, true_labels, predictions, title="Confusion Matrix"):
        """–°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –æ—à–∏–±–æ–∫"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–ª–æ—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏
        flat_true = [label for sequence in true_labels for label in sequence]
        flat_pred = [label for sequence in predictions for label in sequence]
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏
        labels = sorted(set(flat_true + flat_pred))
        
        # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É
        from sklearn.metrics import confusion_matrix
        cm = confusion_matrix(flat_true, flat_pred, labels=labels)
        
        plt.figure(figsize=(12, 8))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
                   xticklabels=labels, yticklabels=labels)
        plt.title(title)
        plt.ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
        plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏')
        plt.xticks(rotation=45)
        plt.yticks(rotation=0)
        plt.tight_layout()
        plt.savefig(f'{title.lower().replace(" ", "_")}.png', dpi=300, bbox_inches='tight')
        plt.show()

    def analyze_errors(self, true_labels, predictions):
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º"""
        errors = []

        for true_seq, pred_seq in zip(true_labels, predictions):
            for true_label, pred_label in zip(true_seq, pred_seq):
                if true_label != pred_label:
                    errors.append((true_label, pred_label))

        error_counts = Counter(errors)

        print("üîç –¢–æ–ø-10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫:")
        for (true_label, pred_label), count in error_counts.most_common(10):
            print(f"  {true_label} -> {pred_label}: {count} —Ä–∞–∑")

        return error_counts

    def plot_label_distribution(self, labels, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–∫"):
        """–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–∫"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
        flat_labels = [label for sequence in labels for label in sequence]

        # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
        label_counts = Counter(flat_labels)

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(12, 6))
        labels_sorted, counts = zip(*label_counts.most_common())
        plt.bar(labels_sorted, counts)
        plt.title(title)
        plt.xlabel('–ú–µ—Ç–∫–∏')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        plt.xticks(rotation=45)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for label, count in zip(labels_sorted, counts):
            plt.text(label, count + max(counts) * 0.01, str(count),
                    ha='center', va='bottom')

        plt.tight_layout()
        plt.savefig(f'{title.lower().replace(" ", "_")}.png', dpi=300, bbox_inches='tight')
        plt.show()

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LoRA –º–æ–¥–µ–ª–∏")
    print("=" * 60)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ModelTester –∏–∑ best.py
    from best import ModelTester

    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–µ—Ä
    tester = ModelTester()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
    base_model = tester.load_base_model()
    lora_model = tester.load_lora_model()

    if lora_model is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å LoRA –º–æ–¥–µ–ª—å")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_examples = tester.create_test_examples()

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏
    print("\nüìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö...")

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    all_true_labels = []
    all_base_predictions = []
    all_lora_predictions = []

    for example in test_examples:
        text = example["text"]
        expected = example["expected"]

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        base_pred = tester.predict_single_text(base_model, text)
        base_labels = [label for _, label in base_pred]

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è LoRA –º–æ–¥–µ–ª–∏
        lora_pred = tester.predict_single_text(lora_model, text)
        lora_labels = [label for _, label in lora_pred]

        # –ò—Å—Ç–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        true_labels = [label for _, label in expected]

        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—ã
        min_len = min(len(base_labels), len(lora_labels), len(true_labels))
        if min_len > 0:
            all_true_labels.append(true_labels[:min_len])
            all_base_predictions.append(base_labels[:min_len])
            all_lora_predictions.append(lora_labels[:min_len])

    if all_true_labels and all_lora_predictions:
        # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = ResultAnalyzer(tester)

        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ LoRA –º–æ–¥–µ–ª–∏
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ LoRA –º–æ–¥–µ–ª–∏:")
        analyzer.analyze_errors(all_true_labels, all_lora_predictions)

        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        print("\nüìà –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        analyzer.plot_label_distribution(all_true_labels, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫")

        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã PNG.")
    else:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
